---
title: "Universal Metric Transformation: The Mathematical Framework"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Universal Metric Transformation Guide}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.width = 8,
  fig.height = 6,
  warning = FALSE,
  message = FALSE
)
```

## The Revolutionary Concept

diversityGPT introduces a paradigm shift in diversity analysis: **ALL diversity metrics are mathematically related through information theory**. This vignette explains the mathematical framework that makes universal metric transformation possible.

```{r setup}
library(diversityGPT)
library(phyloseq)
library(ggplot2)
library(dplyr)

# Load example data
data(GlobalPatterns)
```

## The Universal Information Framework

### Core Principle: Information Decomposition

Every diversity metric can be decomposed into four fundamental information components:

$$\text{Any Diversity Metric} = f(R, E, P, S)$$

Where:
- **R (Richness)**: Information about species count
- **E (Evenness)**: Information about distribution uniformity
- **P (Phylogenetic)**: Information about evolutionary relationships
- **S (Spatial)**: Information about geographic/spatial patterns

### Mathematical Foundation

The transformation is based on information theory principles:

1. **Information Content**: Each diversity metric captures specific aspects of community information
2. **Linear Combinations**: Most metrics can be expressed as weighted combinations of R, E, P, S
3. **Transformation Matrix**: The weights form a transformation matrix enabling metric conversion

## Extracting Universal Information

Let's see how this works in practice:

```{r extract-universal}
# Extract universal information components
universal_info <- extract_universal_information(
  GlobalPatterns,
  groups = "SampleType",
  include_phylogenetic = TRUE  # Include P component if tree available
)

# Examine the structure
str(universal_info, max.level = 2)
```

### Understanding the Output

The `universal_info` object contains:

1. **information_components**: Sample-level R, E, P, S values
2. **transformation_matrix**: Mathematical relationships between metrics
3. **deconvolution_quality**: How well the framework captures diversity patterns

```{r examine-quality}
# Check deconvolution quality
cat("Overall Quality:", universal_info$deconvolution_quality$overall_quality, "\n")
cat("Mean R²:", round(universal_info$deconvolution_quality$mean_r_squared, 3), "\n")

# Get present components
components <- universal_info$deconvolution_quality$components_present
if (is.logical(components)) {
  present_comps <- names(components)[components]
} else {
  present_comps <- names(components)[as.logical(components)]
}
cat("Components Present:", paste(present_comps, collapse = ", "))
```

## The Transformation Matrix

The heart of universal transformation is the transformation matrix:

```{r transformation-matrix}
# View transformation matrix
tm <- universal_info$transformation_matrix
print(round(tm[1:5, ], 3))  # First 5 metrics
```

Each row shows how a metric relates to R, E, P, S components. For example:
- Shannon diversity loads heavily on both R and E
- Observed richness loads primarily on R
- Simpson diversity loads more on E than R

### Visualizing Metric Relationships

```{r plot-relationships, fig.cap="Heatmap showing how metrics relate to information components"}
# Create heatmap of transformation matrix
library(reshape2)
tm_melt <- melt(as.matrix(tm), varnames = c("Metric", "Component"))

ggplot(tm_melt, aes(x = Component, y = Metric, fill = value)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", 
                       midpoint = 0, name = "Weight") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Metric-Component Relationships",
       subtitle = "How each diversity metric relates to R, E, P, S components")
```

## Performing Transformations

### Basic Transformation

Convert from one set of metrics to another:

```{r basic-transform}
# Start with Shannon diversity
source_metrics <- c(shannon = 2.5)

# Transform to multiple targets
predictions <- universal_diversity_transform(
  source_metrics = source_metrics,
  target_metrics = c("simpson", "observed", "chao1"),
  transformation_matrix = tm
)

print(predictions)
```

### Multiple Source Metrics

Better predictions come from multiple source metrics:

```{r multiple-sources}
# Use multiple metrics for more accurate prediction
source_metrics <- c(shannon = 2.5, observed = 150)

predictions <- universal_diversity_transform(
  source_metrics = source_metrics,
  target_metrics = c("simpson", "chao1", "pielou_evenness"),
  transformation_matrix = tm
)

print(predictions)
```

### Assessing Transformation Quality

```{r quality-assessment}
# Check R² for each metric transformation
quality_df <- predictions$quality
print(quality_df)
```

## Advanced Transformations

### Cross-Domain Transformation

Transform between alpha and beta diversity metrics:

```{r cross-domain, eval=FALSE}
# This is possible because both share information components!
alpha_metrics <- c(shannon = 2.3, simpson = 0.85)

# Predict beta diversity metrics
beta_predictions <- universal_diversity_transform(
  source_metrics = alpha_metrics,
  target_metrics = c("bray_curtis_mean", "jaccard_mean"),
  transformation_matrix = tm
)
```

### Phylogenetic Metric Prediction

Even predict phylogenetic metrics without a tree:

```{r phylo-prediction}
# Predict Faith's PD from non-phylogenetic metrics
source_metrics <- c(shannon = 2.5, observed = 150, simpson = 0.9)

phylo_pred <- universal_diversity_transform(
  source_metrics = source_metrics,
  target_metrics = c("faith_pd"),
  transformation_matrix = tm
)

print(phylo_pred)
```

## Understanding Information Components

### Component Interpretation

Let's examine what each component represents:

```{r component-analysis}
# Get component data
components <- universal_info$information_components

# Summarize by sample type
component_summary <- components %>%
  group_by(SampleType) %>%
  summarise(
    mean_R = mean(R_proportion),
    mean_E = mean(E_proportion),
    sd_R = sd(R_proportion),
    sd_E = sd(E_proportion)
  )

print(component_summary)
```

### Ecological Meaning

- **High R, Low E**: Many species but dominated by few (low evenness)
- **Low R, High E**: Few species but evenly distributed
- **High R, High E**: Many species, evenly distributed (high diversity)
- **Low R, Low E**: Few species, uneven distribution (low diversity)

## Validation and Accuracy

### Cross-Validation

Test transformation accuracy:

```{r validation}
# Calculate actual metrics
actual_metrics <- calculate_diversity(GlobalPatterns)

# Take subset for source
source_subset <- actual_metrics[c("shannon", "observed")]

# Predict others
predicted <- universal_diversity_transform(
  source_metrics = source_subset,
  target_metrics = c("simpson", "chao1"),
  transformation_matrix = tm
)

# Compare (would need actual values for full comparison)
cat("Predicted Simpson:", predicted$predictions$simpson, "\n")
cat("Predicted Chao1:", predicted$predictions$chao1, "\n")
```

### Transformation Network

Visualize the complete transformation network:

```{r network-viz, fig.cap="Network showing transformation pathways between metrics"}
plot_diversity_network(universal_info, 
                      edge_threshold = 0.3,  # Show strong relationships
                      interactive = FALSE)
```

## Best Practices

### 1. Choose Good Source Metrics

Some metrics are better predictors than others:

```{r predictor-quality}
# Analyze which metrics are best predictors
predictor_quality <- data.frame(
  metric = rownames(tm),
  total_weight = rowSums(abs(tm)),
  r_weight = abs(tm[, "R_component"]),
  e_weight = abs(tm[, "E_component"])
)

# Best overall predictors
top_predictors <- predictor_quality[order(predictor_quality$total_weight, 
                                         decreasing = TRUE), ]
head(top_predictors)
```

### 2. Use Multiple Sources When Possible

```{r multiple-source-demo}
# Compare single vs multiple source predictions
single_source <- universal_diversity_transform(
  source_metrics = c(shannon = 2.5),
  target_metrics = "simpson",
  transformation_matrix = tm
)

multiple_source <- universal_diversity_transform(
  source_metrics = c(shannon = 2.5, observed = 150),
  target_metrics = "simpson",
  transformation_matrix = tm
)

cat("Single source R²:", single_source$quality$r_squared, "\n")
cat("Multiple source R²:", multiple_source$quality$r_squared, "\n")
```

### 3. Understand Limitations

- Transformations work best within domains (alpha→alpha, beta→beta)
- Phylogenetic metrics need P component (requires tree in reference)
- Spatial metrics need S component (requires coordinates)
- Very rare metrics may have lower prediction accuracy

## Mathematical Details

### The Deconvolution Process

The universal information extraction uses:

1. **Principal Component Analysis**: Initial decomposition
2. **Information Maximization**: Optimize component separation
3. **Metric Regression**: Fit metrics to components
4. **Matrix Inversion**: Enable reverse transformation

### Quality Metrics

- **R²**: Proportion of variance explained
- **RMSE**: Root mean square error of predictions
- **Confidence Intervals**: Bootstrap-based uncertainty

## Applications

### Meta-Analysis Across Studies

```{r meta-analysis, eval=FALSE}
# Study 1: Used Shannon and Simpson
study1_metrics <- data.frame(
  sample = paste0("S1_", 1:50),
  shannon = rnorm(50, 2.5, 0.5),
  simpson = rnorm(50, 0.85, 0.1)
)

# Study 2: Used Observed and Chao1
study2_metrics <- data.frame(
  sample = paste0("S2_", 1:50),
  observed = rnorm(50, 150, 30),
  chao1 = rnorm(50, 180, 40)
)

# Convert both to universal components for comparison
# (Would need actual phyloseq objects for real analysis)
```

### Missing Data Imputation

```{r imputation, eval=FALSE}
# Have some metrics, missing others
partial_data <- data.frame(
  sample = letters[1:10],
  shannon = c(2.1, 2.3, NA, 2.5, NA, 2.2, 2.4, NA, 2.3, 2.1),
  simpson = c(0.82, NA, 0.85, 0.88, 0.84, NA, 0.86, 0.83, NA, 0.85)
)

# Impute missing values using transformation
# (Implementation in development)
```

## Conclusion

The universal transformation framework reveals that diversity metrics are not independent measurements but different views of the same underlying information. This insight enables:

1. **Metric Conversion**: Transform between any metrics
2. **Missing Data**: Predict metrics you didn't measure
3. **Meta-Analysis**: Compare studies using different metrics
4. **Deeper Understanding**: See how metrics relate mathematically

The next vignette explores practical applications with real datasets.