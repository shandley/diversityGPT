% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quality_assurance.R
\name{run_quality_assurance}
\alias{run_quality_assurance}
\title{Quality Assurance and Benchmarking for diversityGPT}
\usage{
run_quality_assurance(
  test_suite = "basic",
  benchmark_data = NULL,
  tolerance = 1e-06,
  performance_baseline = NULL,
  output_report = FALSE,
  output_file = "diversityGPT_QA"
)
}
\arguments{
\item{test_suite}{Test suite to run: "basic", "comprehensive", "performance", or "all"}

\item{benchmark_data}{Optional list of benchmark datasets with expected results}

\item{tolerance}{Tolerance for numerical comparisons (default: 1e-6)}

\item{performance_baseline}{Performance baseline for comparison}

\item{output_report}{Whether to generate a QA report}

\item{output_file}{Output file for QA report}
}
\value{
A list containing:
\item{test_results}{Results from all QA tests}
\item{benchmark_results}{Benchmarking against known datasets}
\item{performance_results}{Performance testing results}
\item{regression_results}{Regression testing results}
\item{overall_assessment}{Overall QA assessment}
}
\description{
Comprehensive quality assurance functions including benchmarking,
regression testing, and performance monitoring to ensure reliability
and consistency of diversityGPT analyses.
Comprehensive Quality Assurance Suite
}
\details{
Runs a complete battery of quality assurance tests including benchmarking
against known datasets, regression testing, and performance validation.
}
\examples{
\dontrun{
# Run comprehensive QA suite
qa_results <- run_quality_assurance(
  test_suite = "comprehensive",
  output_report = TRUE,
  output_file = "diversityGPT_QA_report"
)

print(qa_results)

# Quick basic tests
basic_qa <- run_quality_assurance("basic")
}

}
